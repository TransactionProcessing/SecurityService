// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace SecurityService.OpenIdConnect.IntegrationTests.ChangePassword
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::NUnit.Framework.TestFixtureAttribute()]
    [global::NUnit.Framework.DescriptionAttribute("Change Password")]
    [global::NUnit.Framework.FixtureLifeCycleAttribute(global::NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [global::NUnit.Framework.CategoryAttribute("base")]
    [global::NUnit.Framework.CategoryAttribute("shared")]
    [global::NUnit.Framework.CategoryAttribute("userlogin")]
    [global::NUnit.Framework.CategoryAttribute("changepassword")]
    public partial class ChangePasswordFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "shared",
                "userlogin",
                "changepassword"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "ChangePassword", "Change Password", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
#line 1 "ChangePassword.feature"
#line hidden
        
        [global::NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [global::NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        [global::NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [global::NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::NUnit.Framework.TestContext>(global::NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "Role Name"});
            table1.AddRow(new string[] {
                        "Estate"});
#line 6
 await testRunner.GivenAsync("I create the following roles", ((string)(null)), table1, "Given ");
#line hidden
            global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table2.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "MerchantId,EstateId,role"});
#line 10
 await testRunner.GivenAsync("I create the following api resources", ((string)(null)), table2, "Given ");
#line hidden
            global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description",
                        "UserClaims"});
            table3.AddRow(new string[] {
                        "openid",
                        "Your user identifier",
                        "",
                        "sub"});
            table3.AddRow(new string[] {
                        "profile",
                        "User profile",
                        "Your user profile information (first name, last name, etc.)",
                        "name,role,email,given_name,middle_name,family_name,EstateId,MerchantId"});
            table3.AddRow(new string[] {
                        "email",
                        "Email",
                        "Email and Email Verified Flags",
                        "email_verified,email"});
#line 14
 await testRunner.GivenAsync("I create the following identity resources", ((string)(null)), table3, "Given ");
#line hidden
            global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                        "ClientId",
                        "Name",
                        "Secret",
                        "Scopes",
                        "GrantTypes",
                        "RedirectUris",
                        "PostLogoutRedirectUris",
                        "RequireConsent",
                        "AllowOfflineAccess",
                        "ClientUri"});
            table4.AddRow(new string[] {
                        "estateUIClient",
                        "Merchant Client",
                        "Secret1",
                        "estateManagement,openid,email,profile",
                        "hybrid",
                        "https://[url]:[port]/signin-oidc",
                        "https://[url]:[port]/signout-oidc",
                        "false",
                        "true",
                        "https://[url]:[port]"});
#line 20
 await testRunner.GivenAsync("I create the following clients", ((string)(null)), table4, "Given ");
#line hidden
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("ChangePassword/ChangePassword.feature.ndjson", 3);
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Change Passwword")]
        [global::NUnit.Framework.CategoryAttribute("PRTest")]
        public async global::System.Threading.Tasks.Task ChangePasswword()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Change Passwword", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 26
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Email Address",
                            "Phone Number",
                            "Given Name",
                            "Middle Name",
                            "Family Name",
                            "Claims",
                            "Roles",
                            "Password"});
                table5.AddRow(new string[] {
                            "estateuser@testestate1.co.uk",
                            "123456789",
                            "Test",
                            "",
                            "User 1",
                            "EstateId:1",
                            "Estate",
                            "123456"});
#line 27
 await testRunner.GivenAsync("I create the following users", ((string)(null)), table5, "Given ");
#line hidden
#line 30
 await testRunner.ThenAsync("I get an email with a confirm email address link", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 31
 await testRunner.WhenAsync("I navigate to the confirm email address", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
 await testRunner.ThenAsync("I am presented with the confirm email address successful screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 33
 await testRunner.AndAsync("I get a welcome email with my login details", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
 await testRunner.GivenAsync("I am on the application home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 35
 await testRunner.WhenAsync("I click the \'Privacy\' link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 36
 await testRunner.ThenAsync("I am presented with a login screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 37
 await testRunner.WhenAsync("I login with the username \'estateuser@testestate1.co.uk\' and the provided passwor" +
                        "d", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
 await testRunner.ThenAsync("I am presented with the privacy screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 39
 await testRunner.WhenAsync("I click the \'ChangePassword\' link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
 await testRunner.ThenAsync("I am presented with a change password screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 41
 await testRunner.WhenAsync("I enter my old password", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
 await testRunner.WhenAsync("I enter my new password \'Pa55word!\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
 await testRunner.AndAsync("I confirm my new password \'Pa55word!\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
 await testRunner.AndAsync("I click the change password button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
 await testRunner.ThenAsync("I am returned to the application home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
