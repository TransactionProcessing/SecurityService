// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace SecurityService.IntegrationTests.Users
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::NUnit.Framework.TestFixtureAttribute()]
    [global::NUnit.Framework.DescriptionAttribute("Users")]
    [global::NUnit.Framework.FixtureLifeCycleAttribute(global::NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [global::NUnit.Framework.CategoryAttribute("base")]
    [global::NUnit.Framework.CategoryAttribute("users")]
    [global::NUnit.Framework.CategoryAttribute("roles")]
    public partial class UsersFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "users",
                "roles"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Users", "Users", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
#line 1 "Users.feature"
#line hidden
        
        [global::NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [global::NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        [global::NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [global::NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::NUnit.Framework.TestContext>(global::NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                        "Role Name"});
            table29.AddRow(new string[] {
                        "TestRole1"});
            table29.AddRow(new string[] {
                        "TestRole2"});
            table29.AddRow(new string[] {
                        "TestRole3"});
#line 5
 await testRunner.GivenAsync("I create the following roles", ((string)(null)), table29, "Given ");
#line hidden
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Users/Users.feature.ndjson", 3);
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Get Users")]
        [global::NUnit.Framework.CategoryAttribute("PRTest")]
        public async global::System.Threading.Tasks.Task GetUsers()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get Users", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 12
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table30 = new global::Reqnroll.Table(new string[] {
                            "Email Address",
                            "Phone Number",
                            "Given Name",
                            "Middle Name",
                            "Family Name",
                            "Claims",
                            "Roles"});
                table30.AddRow(new string[] {
                            "testuser1@testing.co.uk",
                            "123456789",
                            "Test",
                            "",
                            "User 1",
                            "",
                            "TestRole1"});
                table30.AddRow(new string[] {
                            "testuser2@testing.co.uk",
                            "123456789",
                            "Test",
                            "",
                            "User 2",
                            "",
                            "TestRole2"});
                table30.AddRow(new string[] {
                            "testuser3@testing.co.uk",
                            "123456789",
                            "Test",
                            "",
                            "User 3",
                            "",
                            "TestRole3"});
#line 13
 await testRunner.GivenAsync("I create the following users", ((string)(null)), table30, "Given ");
#line hidden
                global::Reqnroll.Table table31 = new global::Reqnroll.Table(new string[] {
                            "Email Address",
                            "Phone Number",
                            "Given Name",
                            "Middle Name",
                            "Family Name",
                            "Claims",
                            "Roles",
                            "RegistrationDate"});
                table31.AddRow(new string[] {
                            "testuser1@testing.co.uk",
                            "123456789",
                            "Test",
                            "",
                            "User 1",
                            "email:testuser1@testing.co.uk, given_name:Test, family_name:User 1",
                            "TestRole1",
                            "Today"});
#line 18
 await testRunner.WhenAsync("I get the user with user name \'testuser1@testing.co.uk\' the user details are retu" +
                        "rned as follows", ((string)(null)), table31, "When ");
#line hidden
                global::Reqnroll.Table table32 = new global::Reqnroll.Table(new string[] {
                            "Email Address",
                            "Phone Number",
                            "Given Name",
                            "Middle Name",
                            "Family Name",
                            "Claims",
                            "Roles",
                            "RegistrationDate"});
                table32.AddRow(new string[] {
                            "testuser2@testing.co.uk",
                            "123456789",
                            "Test",
                            "",
                            "User 2",
                            "email:testuser2@testing.co.uk, given_name:Test, family_name:User 2",
                            "TestRole2",
                            "Today"});
#line 21
 await testRunner.WhenAsync("I get the user with user name \'testuser2@testing.co.uk\' the user details are retu" +
                        "rned as follows", ((string)(null)), table32, "When ");
#line hidden
                global::Reqnroll.Table table33 = new global::Reqnroll.Table(new string[] {
                            "Email Address",
                            "Phone Number",
                            "Given Name",
                            "Middle Name",
                            "Family Name",
                            "Claims",
                            "Roles",
                            "RegistrationDate"});
                table33.AddRow(new string[] {
                            "testuser3@testing.co.uk",
                            "123456789",
                            "Test",
                            "",
                            "User 3",
                            "email:testuser3@testing.co.uk, given_name:Test, family_name:User 3",
                            "TestRole3",
                            "Today"});
#line 24
 await testRunner.WhenAsync("I get the user with user name \'testuser3@testing.co.uk\' the user details are retu" +
                        "rned as follows", ((string)(null)), table33, "When ");
#line hidden
                global::Reqnroll.Table table34 = new global::Reqnroll.Table(new string[] {
                            "Email Address",
                            "Phone Number",
                            "Given Name",
                            "Middle Name",
                            "Family Name",
                            "Claims",
                            "Roles",
                            "RegistrationDate"});
                table34.AddRow(new string[] {
                            "testuser1@testing.co.uk",
                            "123456789",
                            "Test",
                            "",
                            "User 1",
                            "email:testuser1@testing.co.uk, given_name:Test, family_name:User 1",
                            "TestRole1",
                            "Today"});
                table34.AddRow(new string[] {
                            "testuser2@testing.co.uk",
                            "123456789",
                            "Test",
                            "",
                            "User 2",
                            "email:testuser2@testing.co.uk, given_name:Test, family_name:User 2",
                            "TestRole2",
                            "Today"});
                table34.AddRow(new string[] {
                            "testuser3@testing.co.uk",
                            "123456789",
                            "Test",
                            "",
                            "User 3",
                            "email:testuser3@testing.co.uk, given_name:Test, family_name:User 3",
                            "TestRole3",
                            "Today"});
#line 27
 await testRunner.WhenAsync("I get the users 3 users details are returned as follows", ((string)(null)), table34, "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
