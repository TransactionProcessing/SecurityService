// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SecurityService.IntegrationTests.Token
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Token")]
    [NUnit.Framework.CategoryAttribute("base")]
    [NUnit.Framework.CategoryAttribute("token")]
    [NUnit.Framework.CategoryAttribute("clients")]
    [NUnit.Framework.CategoryAttribute("apiresources")]
    [NUnit.Framework.CategoryAttribute("users")]
    [NUnit.Framework.CategoryAttribute("roles")]
    [NUnit.Framework.CategoryAttribute("apiscopes")]
    public partial class TokenFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "token",
                "clients",
                "apiresources",
                "users",
                "roles",
                "apiscopes"};
        
#line 1 "Token.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Token", "Token", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            Reqnroll.Table table22 = new Reqnroll.Table(new string[] {
                        "Role Name"});
            table22.AddRow(new string[] {
                        "Estate"});
            table22.AddRow(new string[] {
                        "Merchant"});
#line 6
 await testRunner.GivenAsync("I create the following roles", ((string)(null)), table22, "Given ");
#line hidden
            Reqnroll.Table table23 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description"});
            table23.AddRow(new string[] {
                        "estateManagement",
                        "estateManagement Scope",
                        "A scope for estateManagement"});
            table23.AddRow(new string[] {
                        "transactionProcessor",
                        "transactionProcessor Scope",
                        "A scope for transactionProcessor"});
            table23.AddRow(new string[] {
                        "transactionProcessorAcl",
                        "transactionProcessorAcl Scope",
                        "A scope for transactionProcessorAcl"});
#line 11
 await testRunner.GivenAsync("I create the following api scopes", ((string)(null)), table23, "Given ");
#line hidden
            Reqnroll.Table table24 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table24.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "MerchantId, EstateId, role"});
            table24.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST",
                        "Secret1",
                        "transactionProcessor",
                        ""});
            table24.AddRow(new string[] {
                        "transactionProcessorAcl",
                        "Transaction Processor ACL REST",
                        "Secret1",
                        "transactionProcessorAcl",
                        "MerchantId, EstateId, role"});
#line 17
 await testRunner.GivenAsync("I create the following api resources", ((string)(null)), table24, "Given ");
#line hidden
            Reqnroll.Table table25 = new Reqnroll.Table(new string[] {
                        "ClientId",
                        "Name",
                        "Secret",
                        "Scopes",
                        "GrantTypes"});
            table25.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement,transactionProcessor,transactionProcessorAcl",
                        "client_credentials"});
            table25.AddRow(new string[] {
                        "merchantClient",
                        "Merchant Client",
                        "Secret1",
                        "transactionProcessorAcl",
                        "password"});
#line 23
 await testRunner.GivenAsync("I create the following clients", ((string)(null)), table25, "Given ");
#line hidden
            Reqnroll.Table table26 = new Reqnroll.Table(new string[] {
                        "Email Address",
                        "Password",
                        "Phone Number",
                        "Given Name",
                        "Middle Name",
                        "Family Name",
                        "Claims",
                        "Roles"});
            table26.AddRow(new string[] {
                        "merchantuser@testmerchant1.co.uk",
                        "123456",
                        "123456789",
                        "Test",
                        "",
                        "User 1",
                        "EstateId:1,MerchantId:2",
                        "Merchant"});
#line 28
 await testRunner.GivenAsync("I create the following users", ((string)(null)), table26, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Tokens")]
        [NUnit.Framework.CategoryAttribute("PRTest")]
        public async System.Threading.Tasks.Task GetTokens()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get Tokens", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table27 = new Reqnroll.Table(new string[] {
                            "ClientId",
                            "ClientSecret"});
                table27.AddRow(new string[] {
                            "serviceClient",
                            "Secret1"});
#line 34
 await testRunner.WhenAsync("I request a client token with the following values", ((string)(null)), table27, "When ");
#line hidden
#line 37
 await testRunner.ThenAsync("my token is returned", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
                Reqnroll.Table table28 = new Reqnroll.Table(new string[] {
                            "ClientId",
                            "ClientSecret",
                            "Username",
                            "Password"});
                table28.AddRow(new string[] {
                            "merchantClient",
                            "Secret1",
                            "merchantuser@testmerchant1.co.uk",
                            "123456"});
#line 38
 await testRunner.WhenAsync("I request a password token with the following values", ((string)(null)), table28, "When ");
#line hidden
#line 41
 await testRunner.ThenAsync("my token is returned", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
