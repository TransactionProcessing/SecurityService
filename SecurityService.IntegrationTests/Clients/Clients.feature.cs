// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SecurityService.IntegrationTests.Clients
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "base")]
    [Xunit.TraitAttribute("Category", "clients")]
    public partial class ClientsFeature : object, Xunit.IClassFixture<ClientsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "clients"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Clients.feature"
#line hidden
        
        public ClientsFeature(ClientsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Clients", "Clients", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Clients")]
        [Xunit.TraitAttribute("FeatureTitle", "Clients")]
        [Xunit.TraitAttribute("Description", "Get Clients")]
        [Xunit.TraitAttribute("Category", "PRTest")]
        public async System.Threading.Tasks.Task GetClients()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get Clients", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table9 = new Reqnroll.Table(new string[] {
                            "ClientId",
                            "Name",
                            "Description",
                            "Secret",
                            "Scopes",
                            "GrantTypes",
                            "RedirectUris",
                            "PostLogoutRedirectUris",
                            "RequireConsent"});
                table9.AddRow(new string[] {
                            "testclient1",
                            "Test Client 1",
                            "A test client 1",
                            "secret1",
                            "Scope1, Scope2",
                            "client_credentials",
                            "",
                            "",
                            ""});
                table9.AddRow(new string[] {
                            "testclient2",
                            "Test Client 2",
                            "A second test client",
                            "Secret2",
                            "Scope1, Scope2",
                            "hybrid",
                            "http://localhost/signin-oidc",
                            "http://localhost/signout-oidc",
                            "true"});
#line 6
 await testRunner.GivenAsync("I create the following clients", ((string)(null)), table9, "Given ");
#line hidden
                Reqnroll.Table table10 = new Reqnroll.Table(new string[] {
                            "ClientId",
                            "Name",
                            "Description",
                            "Scopes",
                            "GrantTypes",
                            "RedirectUris",
                            "PostLogoutRedirectUris",
                            "RequireConsent"});
                table10.AddRow(new string[] {
                            "testclient1",
                            "Test Client 1",
                            "A test client 1",
                            "Scope1, Scope2",
                            "client_credentials",
                            "",
                            "",
                            ""});
#line 11
 await testRunner.WhenAsync("I get the client with client id \'testclient1\' the client details are returned as " +
                        "follows", ((string)(null)), table10, "When ");
#line hidden
                Reqnroll.Table table11 = new Reqnroll.Table(new string[] {
                            "ClientId",
                            "Name",
                            "Description",
                            "Scopes",
                            "GrantTypes",
                            "RedirectUris",
                            "PostLogoutRedirectUris",
                            "RequireConsent"});
                table11.AddRow(new string[] {
                            "testclient2",
                            "Test Client 2",
                            "A second test client",
                            "Scope1, Scope2",
                            "hybrid",
                            "http://localhost/signin-oidc",
                            "http://localhost/signout-oidc",
                            "true"});
#line 15
 await testRunner.WhenAsync("I get the client with client id \'testclient2\' the client details are returned as " +
                        "follows", ((string)(null)), table11, "When ");
#line hidden
                Reqnroll.Table table12 = new Reqnroll.Table(new string[] {
                            "ClientId",
                            "Name",
                            "Description",
                            "Scopes",
                            "GrantTypes",
                            "RedirectUris",
                            "PostLogoutRedirectUris",
                            "RequireConsent"});
                table12.AddRow(new string[] {
                            "testclient1",
                            "Test Client 1",
                            "A test client 1",
                            "Scope1, Scope2",
                            "client_credentials",
                            "",
                            "",
                            ""});
                table12.AddRow(new string[] {
                            "testclient2",
                            "Test Client 2",
                            "A second test client",
                            "Scope1, Scope2",
                            "hybrid",
                            "http://localhost/signin-oidc",
                            "http://localhost/signout-oidc",
                            "true"});
#line 20
 await testRunner.WhenAsync("I get the clients 2 clients details are returned as follows", ((string)(null)), table12, "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ClientsFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ClientsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
