name: Release

on:
  release:
    types: [published]

jobs:
  buildlinux:
    name: "Release"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Install NET 9
      uses: actions/setup-dotnet@v4.0.1
      with:
        dotnet-version: '9.0.x'
    
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Restore Nuget Packages
      run: dotnet restore SecurityService.sln --source ${{ secrets.PUBLICFEEDURL }} --source ${{ secrets.PRIVATEFEED_URL }}

    - name: Build Code
      run: dotnet build SecurityService.sln --configuration Release

    - name: Run Unit Tests
      run: |
        echo "ASPNETCORE_ENVIRONMENT are > ${ASPNETCORE_ENVIRONMENT}"
        dotnet test "SecurityService.UnitTests\SecurityService.UnitTests.csproj"
   
    - name: Publish Images to Docker Hub - Pre Release
      if: ${{ github.event.release.prerelease == true }} 
      run: |
        docker build . --file SecurityService/Dockerfile --tag stuartferguson/securityservice:dev
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
        docker push stuartferguson/securityservice:dev

    - name: Publish Images to Docker Hub - Formal Release
      if: ${{ github.event.release.prerelease == false }} 
      run: |
        docker build . --file SecurityService/Dockerfile --tag stuartferguson/securityservice:latest
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
        docker push stuartferguson/securityservice:latest
    
    - name: Publish API
      if: ${{ github.event.release.prerelease == false }} 
      run: dotnet publish "SecurityService\SecurityService.csproj" --configuration Release --output publishOutput -r win-x64 --self-contained             

    - name: Build Release Package
      run: |
         cd /home/runner/work/SecurityService/SecurityService/publishOutput
         zip -r ../securityservice.zip ./*

    - name: Upload the artifact
      uses: actions/upload-artifact@v4.4.0
      with:
        name: securityservice
        path: securityservice.zip

    - name: Build and Publish Nuget Packages
      if: ${{ github.event.release.prerelease == false }} 
      run: |
        dotnet pack "SecurityService.Client\SecurityService.Client.csproj" /p:PackageVersion=${{ steps.get_version.outputs.VERSION }} --output Nugets
        dotnet nuget push Nugets/SecurityService.Client.${{ steps.get_version.outputs.VERSION }}.nupkg --api-key ${{ secrets.PRIVATEFEED_APIKEY }} --source ${{ secrets.PRIVATEFEED_URL }} --skip-duplicate 
        dotnet pack "SecurityService.IntegrationTesting.Helpers\SecurityService.IntegrationTesting.Helpers.csproj" /p:PackageVersion=${{ steps.get_version.outputs.VERSION }} --output Nugets -c Release            
        dotnet nuget push Nugets/SecurityService.IntegrationTesting.Helpers.${{ steps.get_version.outputs.VERSION }}.nupkg --api-key ${{ secrets.PRIVATEFEED_APIKEY }} --source ${{ secrets.PRIVATEFEED_URL }} --skip-duplicate         
        
  deploystaging:
      runs-on: [stagingserver, linux]
      needs: buildlinux
      environment: staging
      name: "Deploy to Staging"

      steps:
        - name: Download the artifact
          uses: actions/download-artifact@v4.1.8
          with:
            name: securityservice
            path: /tmp/securityservice # Download to a temporary directory

        - name: Remove existing service (if applicable)
          run: |
            SERVICE_NAME="securityservice" # Or whatever your service will be called
            if systemctl is-active --quiet "$SERVICE_NAME"; then
              echo "Stopping existing service..."
              sudo systemctl stop "$SERVICE_NAME"
            fi
            if systemctl is-enabled --quiet "$SERVICE_NAME"; then
              echo "Disabling existing service..."
              sudo systemctl disable "$SERVICE_NAME"
            fi
            if [ -f "/etc/systemd/system/${SERVICE_NAME}.service" ]; then
              echo "Removing existing service unit file..."
              sudo rm "/etc/systemd/system/${SERVICE_NAME}.service"
              sudo systemctl daemon-reload
            fi

        - name: Unzip the files
          run: |
            mkdir -p /opt/txnproc/transactionprocessing/securityservice
            unzip -o /tmp/securityservice/securityservice.zip -d /opt/txnproc/transactionprocessing/securityservice

        - name: Install and Start as a Linux service
          run: |
            SERVICE_NAME="securityservice"
            EXEC_PATH="/opt/txnproc/transactionprocessing/securityservice/SecurityService" # Assuming your executable is named SecurityService
            SERVICE_DESCRIPTION="Transaction Processing - Security Service"

            # Create a systemd service file
            echo "[Unit]" | sudo tee /etc/systemd/system/${SERVICE_NAME}.service
            echo "Description=${SERVICE_DESCRIPTION}" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "After=network.target" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "[Service]" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "ExecStart=${EXEC_PATH}" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "Restart=always" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "User=youruser" # Consider running as a less privileged user
            echo "Group=yourgroup" # Consider running as a less privileged group
            echo "" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "[Install]" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "WantedBy=multi-user.target" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service

            # Reload systemd, enable, and start the service
            sudo systemctl daemon-reload
            sudo systemctl enable "$SERVICE_NAME"
            sudo systemctl start "$SERVICE_NAME"
            sudo systemctl status "$SERVICE_NAME" --no-pager # For debugging/verification    

  deployproduction:
    runs-on: [productionserver, linux]
    needs: [buildlinux, deploystaging]
    environment: production
    name: "Deploy to Production"
    
    steps:
        - name: Download the artifact
          uses: actions/download-artifact@v4.1.8
          with:
            name: securityservice
            path: /tmp/securityservice # Download to a temporary directory

        - name: Remove existing service (if applicable)
          run: |
            SERVICE_NAME="securityservice" # Or whatever your service will be called
            if systemctl is-active --quiet "$SERVICE_NAME"; then
              echo "Stopping existing service..."
              sudo systemctl stop "$SERVICE_NAME"
            fi
            if systemctl is-enabled --quiet "$SERVICE_NAME"; then
              echo "Disabling existing service..."
              sudo systemctl disable "$SERVICE_NAME"
            fi
            if [ -f "/etc/systemd/system/${SERVICE_NAME}.service" ]; then
              echo "Removing existing service unit file..."
              sudo rm "/etc/systemd/system/${SERVICE_NAME}.service"
              sudo systemctl daemon-reload
            fi

        - name: Unzip the files
          run: |
            mkdir -p /opt/txnproc/transactionprocessing/securityservice
            unzip -o /tmp/securityservice/securityservice.zip -d /opt/txnproc/transactionprocessing/securityservice

        - name: Install and Start as a Linux service
          run: |
            SERVICE_NAME="securityservice"
            EXEC_PATH="/opt/txnproc/transactionprocessing/securityservice/SecurityService" # Assuming your executable is named SecurityService
            SERVICE_DESCRIPTION="Transaction Processing - Security Service"

            # Create a systemd service file
            echo "[Unit]" | sudo tee /etc/systemd/system/${SERVICE_NAME}.service
            echo "Description=${SERVICE_DESCRIPTION}" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "After=network.target" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "[Service]" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "ExecStart=${EXEC_PATH}" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "Restart=always" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "User=youruser" # Consider running as a less privileged user
            echo "Group=yourgroup" # Consider running as a less privileged group
            echo "" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "[Install]" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service
            echo "WantedBy=multi-user.target" | sudo tee -a /etc/systemd/system/${SERVICE_NAME}.service

            # Reload systemd, enable, and start the service
            sudo systemctl daemon-reload
            sudo systemctl enable "$SERVICE_NAME"
            sudo systemctl start "$SERVICE_NAME"
            sudo systemctl status "$SERVICE_NAME" --no-pager # For debugging/verification         
