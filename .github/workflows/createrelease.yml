name: Release

on:
  release:
    types: [published]

jobs:
  buildlinux:
    name: "Release"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.4
    
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Restore Nuget Packages
      run: dotnet restore SecurityService.sln --source ${{ secrets.PUBLICFEEDURL }} --source ${{ secrets.PRIVATEFEED_URL }}

    - name: Build Code
      run: dotnet build SecurityService.sln --configuration Release

    - name: Run Unit Tests
      run: |
        echo "ASPNETCORE_ENVIRONMENT are > ${ASPNETCORE_ENVIRONMENT}"
        dotnet test "SecurityService.UnitTests\SecurityService.UnitTests.csproj"
   
    - name: Publish Images to Docker Hub - Pre Release
      if: ${{ github.event.release.prerelease == true }} 
      run: |
        docker build . --file SecurityService/Dockerfile --tag stuartferguson/securityservice:dev
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
        docker push stuartferguson/securityservice:dev

    - name: Publish Images to Docker Hub - Formal Release
      if: ${{ github.event.release.prerelease == false }} 
      run: |
        docker build . --file SecurityService/Dockerfile --tag stuartferguson/securityservice:latest
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
        docker push stuartferguson/securityservice:latest
    
    - name: Publish API
      if: ${{ github.event.release.prerelease == false }} 
      run: dotnet publish "SecurityService\SecurityService.csproj" --configuration Release --output publishOutput -r win-x64 --self-contained             

    - name: Build Release Package
      run: |
         cd /home/runner/work/SecurityService/SecurityService/publishOutput
         zip -r ../securityservice.zip ./*

    - name: Upload the artifact
      uses: actions/upload-artifact@v3
      with:
        name: securityservice
        path: securityservice.zip

    - name: Build and Publish Nuget Packages
      if: ${{ github.event.release.prerelease == false }} 
      run: |
        dotnet pack "SecurityService.Client\SecurityService.Client.csproj" /p:PackageVersion=${{ steps.get_version.outputs.VERSION }} --output Nugets
        dotnet nuget push Nugets/SecurityService.Client.${{ steps.get_version.outputs.VERSION }}.nupkg --api-key ${{ secrets.PRIVATEFEED_APIKEY }} --source ${{ secrets.PRIVATEFEED_URL }} --skip-duplicate 
        dotnet pack "SecurityService.IntegrationTesting.Helpers\SecurityService.IntegrationTesting.Helpers.csproj" /p:PackageVersion=${{ steps.get_version.outputs.VERSION }} --output Nugets -c Release            
        dotnet nuget push Nugets/SecurityService.IntegrationTesting.Helpers.${{ steps.get_version.outputs.VERSION }}.nupkg --api-key ${{ secrets.PRIVATEFEED_APIKEY }} --source ${{ secrets.PRIVATEFEED_URL }} --skip-duplicate         
        
  deploystaging:
    runs-on: stagingserver
    needs: buildlinux
    environment: staging
    name: "Deploy to Staging"
    
    steps:
      - name: Download the artifact
        uses: actions/download-artifact@v3
        with:
          name: securityservice

      - name: Remove existing  Windows service
        run: |
          $serviceName = "Transaction Processing - Security Service"
          # Check if the service exists
          if (Get-Service -Name $serviceName -ErrorAction SilentlyContinue) {
            Stop-Service -Name $serviceName
            sc.exe delete $serviceName
          }

      - name: Unzip the files
        run: |
          Expand-Archive -Path securityservice.zip -DestinationPath "C:\txnproc\transactionprocessing\securityservice" -Force
      
      - name: Install as a Windows service
        run: |
          $serviceName = "Transaction Processing - Security Service"
          $servicePath = "C:\txnproc\transactionprocessing\securityservice\SecurityService.exe"
                   
          New-Service -Name $serviceName -BinaryPathName $servicePath -Description "Transaction Processing - Security Service" -DisplayName "Transaction Processing - Security Service" -StartupType Automatic
          Start-Service -Name $serviceName    

  deployproduction:
    runs-on: productionserver
    needs: [buildlinux, deploystaging]
    environment: production
    name: "Deploy to Production"
    
    steps:
      - name: Download the artifact
        uses: actions/download-artifact@v3
        with:
          name: securityservice

      - name: Remove existing  Windows service
        run: |
          $serviceName = "Transaction Processing - Security Service"
          # Check if the service exists
          if (Get-Service -Name $serviceName -ErrorAction SilentlyContinue) {
            Stop-Service -Name $serviceName
            sc.exe delete $serviceName
          }

      - name: Unzip the files
        run: |
          Expand-Archive -Path securityservice.zip -DestinationPath "C:\txnproc\transactionprocessing\securityservice" -Force
      
      - name: Install as a Windows service
        run: |
          $serviceName = "Transaction Processing - Security Service"
          $servicePath = "C:\txnproc\transactionprocessing\securityservice\SecurityService.exe"
                   
          New-Service -Name $serviceName -BinaryPathName $servicePath -Description "Transaction Processing - Security Service" -DisplayName "Transaction Processing - Security Service" -StartupType Automatic
          Start-Service -Name $serviceName          
