name: Nightly Build

on:
  schedule:
  - cron: "30 23 * * *"
  repository_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      commitcount: ${{ steps.commitswithintime.outputs.number-of-commits-within-time }}
    steps:
      - uses: actions/checkout@v2
        #with:
          #fetch-depth: 0

      - name: Check for commits within time 
        #uses: AlexHolderDeveloper/CommitsWithinTime@v1.1.5
        uses: TransactionProcessing/CommitsWithinTime@1.0.0
        id: commitswithintime
        with:
          hours: 24
          
      - name: Get the output from CommitsWithinTime
        run: |
          echo "The 'has-new-commits-within-time' value is ${{ steps.commitswithintime.outputs.has-new-commits-within-time }}"
          echo "The 'number-of-commits-within-time' value is ${{ steps.commitswithintime.outputs.number-of-commits-within-time }}"
          echo "The 'total-commits' value is ${{ steps.commitswithintime.outputs.total-commits }}" 

  buildnonui:
    name: "Nightly Build - Non UI"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: windows-2019

    needs: check
    if: ${{ needs.check.outputs.commitcount > 0 }}

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Install NET 7
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0.x'

    - name: Set Up Variables
      run: echo ("action_url=" + $env:GITHUB_SERVER_URL+ "/" + $env:GITHUB_REPOSITORY + "/actions/runs/" + $env:GITHUB_RUN_ID) >> $env:GITHUB_ENV
      
    - name: Trust Certificate
      run: |
        $certPath = "$env:GITHUB_WORKSPACE\Certificates\aspnetapp-web-api.pfx"        
        Import-PfxCertificate -FilePath $certpath -Password (ConvertTo-SecureString -String 'password' -AsPlainText -Force) -CertStoreLocation Cert:\LocalMachine\Root

    - name: Restore Nuget Packages
      run: dotnet restore SecurityService.sln --source ${{ secrets.PUBLICFEEDURL }} --source ${{ secrets.PRIVATEFEED_URL }}

    - name: Build Code
      run: dotnet build SecurityService.sln --configuration Release

    - name: Run Unit Tests
      run: |
        echo "ASPNETCORE_ENVIRONMENT are > ${ASPNETCORE_ENVIRONMENT}"
        dotnet test "SecurityService.UnitTests\SecurityService.UnitTests.csproj"  /p:ExcludeByFile="\SecurityService\Views\**\*.cshtml" /p:CollectCoverage=true /p:Exclude="[xunit*]*" /p:ExcludeByAttribute="Obsolete" /p:ExcludeByAttribute="GeneratedCodeAttribute" /p:ExcludeByAttribute="CompilerGeneratedAttribute" /p:ExcludeByAttribute="ExcludeFromCodeCoverageAttribute" /p:CoverletOutput="../lcov1.info" /maxcpucount:1 /p:CoverletOutputFormat="lcov"
    
    - name: Build Docker Images
      run: |
        docker build . --file SecurityService/DockerfileWindows --tag securityservice:latest
        docker build . --file SecurityServiceTestUI/DockerfileWindows --tag securityservicetestui:latest

    - name: Run Integration Tests (Non UI)
      run: |
        dotnet test "SecurityService.IntegrationTests\SecurityService.IntegrationTests.csproj" --filter Category=PRTest    

    - name: Create Issue on Failed workflow
      if: ${{ failure() }}
      uses: dacbd/create-issue-action@main
      with:
        token: ${{ github.token }}
        title: Investigate Nightly Build Failure - Non UI Tests
        body: Url is ${{env.action_url}}
        labels: nightlybuild

  buildfirefoxui:
    name: "Nightly Build - Firefox UI"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: windows-2019

    needs: check
    if: ${{ needs.check.outputs.commitcount > 0 }}

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Install NET 7
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0.x'

    - name: Set Up Variables
      run: echo ("action_url=" + $env:GITHUB_SERVER_URL+ "/" + $env:GITHUB_REPOSITORY + "/actions/runs/" + $env:GITHUB_RUN_ID) >> $env:GITHUB_ENV
      
    - name: Trust Certificate
      run: |
        $certPath = "$env:GITHUB_WORKSPACE\Certificates\aspnetapp-web-api.pfx"        
        Import-PfxCertificate -FilePath $certpath -Password (ConvertTo-SecureString -String 'password' -AsPlainText -Force) -CertStoreLocation Cert:\LocalMachine\Root

    - name: Restore Nuget Packages
      run: dotnet restore SecurityService.sln --source ${{ secrets.PUBLICFEEDURL }} --source ${{ secrets.PRIVATEFEED_URL }}

    - name: Build Code
      run: dotnet build SecurityService.sln --configuration Release
    
    - name: Build Docker Images
      run: |
        docker build . --file SecurityService/DockerfileWindows --tag securityservice:latest
        docker build . --file SecurityServiceTestUI/DockerfileWindows --tag securityservicetestui:latest

    - name: Run Integration Tests (UI Firefox)
      env:
        Browser: Firefox
      run: |
        dotnet test "SecurityService.OpenIdConnect.IntegrationTests\SecurityService.OpenIdConnect.IntegrationTests.csproj" --filter Category=PRTest
    
    - uses: dacbd/create-issue-action@main
      if: ${{ failure() }}
      name: Create an issue on build failure
      with:
        title: Investigate Nightly Build Failure - Firefox UI
        token: ${{secrets.GITHUB_TOKEN}}
        labels: nightlybuild
        body: Url is ${{env.action_url}}

  buildchromeui:
    name: "Nightly Build - Chrome UI"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: windows-2019

    needs: check
    if: ${{ needs.check.outputs.commitcount > 0 }}

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Install NET 7
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0.x'

    - name: Set Up Variables
      run: echo ("action_url=" + $env:GITHUB_SERVER_URL+ "/" + $env:GITHUB_REPOSITORY + "/actions/runs/" + $env:GITHUB_RUN_ID) >> $env:GITHUB_ENV
      
    - name: Trust Certificate
      run: |
        $certPath = "$env:GITHUB_WORKSPACE\Certificates\aspnetapp-web-api.pfx"        
        Import-PfxCertificate -FilePath $certpath -Password (ConvertTo-SecureString -String 'password' -AsPlainText -Force) -CertStoreLocation Cert:\LocalMachine\Root
        
    - name: Restore Nuget Packages
      run: dotnet restore SecurityService.sln --source ${{ secrets.PUBLICFEEDURL }} --source ${{ secrets.PRIVATEFEED_URL }}

    - name: Build Code
      run: dotnet build SecurityService.sln --configuration Release

    - name: Run Unit Tests
      run: |
        echo "ASPNETCORE_ENVIRONMENT are > ${ASPNETCORE_ENVIRONMENT}"
        dotnet test "SecurityService.UnitTests\SecurityService.UnitTests.csproj"  /p:ExcludeByFile="\SecurityService\Views\**\*.cshtml" /p:CollectCoverage=true /p:Exclude="[xunit*]*" /p:ExcludeByAttribute="Obsolete" /p:ExcludeByAttribute="GeneratedCodeAttribute" /p:ExcludeByAttribute="CompilerGeneratedAttribute" /p:ExcludeByAttribute="ExcludeFromCodeCoverageAttribute" /p:CoverletOutput="../lcov1.info" /maxcpucount:1 /p:CoverletOutputFormat="lcov"
    
    - name: Build Docker Images
      run: |
        docker build . --file SecurityService/DockerfileWindows --tag securityservice:latest
        docker build . --file SecurityServiceTestUI/DockerfileWindows --tag securityservicetestui:latest

    - name: Run Integration Tests (UI Chrome)
      env:
        Browser: Chrome
      run: |  
        dotnet test "SecurityService.OpenIdConnect.IntegrationTests\SecurityService.OpenIdConnect.IntegrationTests.csproj" --filter Category=PRTest
            
    - uses: dacbd/create-issue-action@main
      if: ${{ failure() }}
      name: Create an issue on build failure
      with:
        title: Investigate Nightly Build Failure - Chrome UI
        token: ${{secrets.GITHUB_TOKEN}}
        labels: nightlybuild
        body: Url is ${{env.action_url}}

  buildedgeui:
    name: "Nightly Build - Edge UI"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: windows-2019

    needs: check
    if: ${{ needs.check.outputs.commitcount > 0 }}

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Install NET 7
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0.x'

    - name: Set Up Variables
      run: echo ("action_url=" + $env:GITHUB_SERVER_URL+ "/" + $env:GITHUB_REPOSITORY + "/actions/runs/" + $env:GITHUB_RUN_ID) >> $env:GITHUB_ENV
      
    - name: Trust Certificate
      run: |
        $certPath = "$env:GITHUB_WORKSPACE\Certificates\aspnetapp-web-api.pfx"
        Import-PfxCertificate -FilePath $certpath -Password (ConvertTo-SecureString -String 'password' -AsPlainText -Force) -CertStoreLocation Cert:\LocalMachine\Root
        
    - name: Install NET 7
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0.101'

    - name: Restore Nuget Packages
      run: dotnet restore SecurityService.sln --source ${{ secrets.PUBLICFEEDURL }} --source ${{ secrets.PRIVATEFEED_URL }}

    - name: Build Code
      run: dotnet build SecurityService.sln --configuration Release
    
    - name: Build Docker Images
      run: |
        docker build . --file SecurityService/DockerfileWindows --tag securityservice:latest
        docker build . --file SecurityServiceTestUI/DockerfileWindows --tag securityservicetestui:latest

    - name: Run Integration Tests (UI Edge)
      env:
        Browser: Edge
        DriverPath: C:\\SeleniumWebDrivers\\EdgeDriver\\
        DriverExe: msedgedriver.exe
      run: |
        dotnet test "SecurityService.OpenIdConnect.IntegrationTests\SecurityService.OpenIdConnect.IntegrationTests.csproj" --filter Category=PRTest

    - uses: dacbd/create-issue-action@main
      if: ${{ failure() }}
      name: Create an issue on build failure
      with:
        title: Investigate Nightly Build Failure - Edge UI
        token: ${{secrets.GITHUB_TOKEN}}
        labels: nightlybuild
        body: Url is ${{env.action_url}}
        
  codecoverage:
    name: "Nightly Build - Code Coverage"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: ubuntu-latest

    needs: check
    if: ${{ needs.check.outputs.commitcount > 0 }}

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Install NET 7
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0.x'

    - name: Restore Nuget Packages
      run: dotnet restore SecurityService.sln --source ${{ secrets.PUBLICFEEDURL }} --source ${{ secrets.PRIVATEFEED_URL }}
        
    - name: Build Code
      run: dotnet build SecurityService.sln --configuration Release

    - name: Run Unit Tests
      run: |
        echo "ASPNETCORE_ENVIRONMENT are > ${ASPNETCORE_ENVIRONMENT}"
        dotnet test "SecurityService.UnitTests\SecurityService.UnitTests.csproj"  /p:ExcludeByFile="\SecurityService\Views\**\*.cshtml" /p:CollectCoverage=true /p:Exclude="[xunit*]*" /p:ExcludeByAttribute="Obsolete" /p:ExcludeByAttribute="GeneratedCodeAttribute" /p:ExcludeByAttribute="CompilerGeneratedAttribute" /p:ExcludeByAttribute="ExcludeFromCodeCoverageAttribute" /p:CoverletOutput="../lcov1.info" /maxcpucount:1 /p:CoverletOutputFormat="lcov"

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3  
      with:
        files: ./lcov1.info 
