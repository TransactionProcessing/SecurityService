namespace SecurityService.Bootstrapper
{
    using System;
    using System.IO;
    using BusinessLogic;
    using Database.DbContexts;
    using Factories;
    using Lamar;
    using Microsoft.AspNetCore.Identity;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Diagnostics.HealthChecks;
    using Microsoft.Extensions.Hosting;
    using Microsoft.OpenApi.Models;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Serialization;
    using Shared.Extensions;
    using Shared.General;
    using Swashbuckle.AspNetCore.Filters;

    public class MiddlewareRegistry : ServiceRegistry
    {
        public MiddlewareRegistry()
        {
            this.AddHealthChecks()
                    .AddSqlServer(ConfigurationReader.GetConnectionString("PersistedGrantDbContext"),
                                  "SELECT 1;",
                                  "Persisted Grant DB",
                                  HealthStatus.Unhealthy,
                                  new string[] { "db", "sql", "sqlserver", "persistedgrant" })
                    .AddSqlServer(ConfigurationReader.GetConnectionString("ConfigurationDbContext"),
                                  "SELECT 1;",
                                  "Configuration DB",
                                  HealthStatus.Unhealthy,
                                  new string[] { "db", "sql", "sqlserver", "configuration" })
                    .AddSqlServer(ConfigurationReader.GetConnectionString("AuthenticationDbContext"),
                                  "SELECT 1;",
                                  "Authentication DB",
                                  HealthStatus.Unhealthy,
                                  new string[] { "db", "sql", "sqlserver", "authentication" })
                    .AddMessagingService();

            this.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo
                {
                    Title = "Authentication API",
                    Version = "1.0",
                    Description = "A REST Api to provide authentication services including management of user/client and api details.",
                    Contact = new OpenApiContact
                    {
                        Name = "Stuart Ferguson",
                        Email = "golfhandicapping@btinternet.com"
                    }
                });
                // add a custom operation filter which sets default values
                c.OperationFilter<SwaggerDefaultValues>();
                c.ExampleFilters();

                //Locate the XML files being generated by ASP.NET...
                DirectoryInfo directory = new DirectoryInfo(AppContext.BaseDirectory);
                FileInfo[] xmlFiles = directory.GetFiles("*.xml");

                //... and tell Swagger to use those XML comments.
                foreach (FileInfo fileInfo in xmlFiles)
                {
                    c.IncludeXmlComments(fileInfo.FullName);
                }
            });

            this.AddSwaggerExamplesFromAssemblyOf<SwaggerJsonConverter>();
        }
    }

    public class IdentityServerRegistry : ServiceRegistry
    {
        public IdentityServerRegistry()
        {
            // Get the DB Connection Strings
            String persistedGrantStoreConenctionString = Startup.Configuration.GetConnectionString("PersistedGrantDbContext");
            String configurationConnectionString = Startup.Configuration.GetConnectionString("ConfigurationDbContext");
            String authenticationConenctionString = Startup.Configuration.GetConnectionString("AuthenticationDbContext");

            this.AddIdentity<IdentityUser, IdentityRole>().AddEntityFrameworkStores<AuthenticationDbContext>().AddDefaultTokenProviders();

            IIdentityServerBuilder identityServerBuilder = this.AddIdentityServer(options =>
                                                                                      {
                                                                                          // https://docs.duendesoftware.com/identityserver/v5/fundamentals/resources/
                                                                                          options.EmitStaticAudienceClaim = true;

                                                                                          options.Events.RaiseSuccessEvents = true;
                                                                                          options.Events.RaiseFailureEvents = true;
                                                                                          options.Events.RaiseErrorEvents = true;

                                                                                          options.IssuerUri = Startup.Configuration.GetValue<String>("ServiceOptions:IssuerUrl");
                                                                                      });

            identityServerBuilder.AddAspNetIdentity<IdentityUser>();

            if (Startup.WebHostEnvironment.IsEnvironment("IntegrationTest") || Startup.Configuration.GetValue<Boolean>("ServiceOptions:UseInMemoryDatabase") == true)
            {
                identityServerBuilder.AddIntegrationTestConfiguration();
            }
            else
            {
                identityServerBuilder.AddIdentityServerStorage(configurationConnectionString,
                                                               persistedGrantStoreConenctionString,
                                                               authenticationConenctionString);
            }
        }
    }

    public class MvcRegistry : ServiceRegistry
    {
        public MvcRegistry()
        {
            
        }
    }

    public class MiscRegistry : ServiceRegistry
    {
        public MiscRegistry()
        {
            this.AddScoped<ISecurityServiceManager, SecurityServiceManager>();
            this.AddSingleton<IModelFactory, ModelFactory>();
        }
    }
}
